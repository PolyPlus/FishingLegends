//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/ClickController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ClickController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ClickController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ClickController"",
    ""maps"": [
        {
            ""name"": ""pointer"",
            ""id"": ""ccd17afb-f693-43a7-8105-ff44efb5729d"",
            ""actions"": [
                {
                    ""name"": ""press"",
                    ""type"": ""Value"",
                    ""id"": ""873b4c1b-d746-4535-b86d-0f803eef406b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cda4e55f-5bdc-42d6-ac1e-9d74dbfc6f72"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": ""Hold(duration=1.401298E-45,pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // pointer
        m_pointer = asset.FindActionMap("pointer", throwIfNotFound: true);
        m_pointer_press = m_pointer.FindAction("press", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // pointer
    private readonly InputActionMap m_pointer;
    private IPointerActions m_PointerActionsCallbackInterface;
    private readonly InputAction m_pointer_press;
    public struct PointerActions
    {
        private @ClickController m_Wrapper;
        public PointerActions(@ClickController wrapper) { m_Wrapper = wrapper; }
        public InputAction @press => m_Wrapper.m_pointer_press;
        public InputActionMap Get() { return m_Wrapper.m_pointer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PointerActions set) { return set.Get(); }
        public void SetCallbacks(IPointerActions instance)
        {
            if (m_Wrapper.m_PointerActionsCallbackInterface != null)
            {
                @press.started -= m_Wrapper.m_PointerActionsCallbackInterface.OnPress;
                @press.performed -= m_Wrapper.m_PointerActionsCallbackInterface.OnPress;
                @press.canceled -= m_Wrapper.m_PointerActionsCallbackInterface.OnPress;
            }
            m_Wrapper.m_PointerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @press.started += instance.OnPress;
                @press.performed += instance.OnPress;
                @press.canceled += instance.OnPress;
            }
        }
    }
    public PointerActions @pointer => new PointerActions(this);
    public interface IPointerActions
    {
        void OnPress(InputAction.CallbackContext context);
    }
}
